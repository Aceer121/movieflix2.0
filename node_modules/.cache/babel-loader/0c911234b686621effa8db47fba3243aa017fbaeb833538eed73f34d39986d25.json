{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arcel\\\\movieflix2.0\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchMovies } from '../services/api'; // Import your API fetching function\nimport MovieList from '../components/MovieList';\nimport SearchBar from '../components/SearchBar';\nimport Filter from '../components/Filter';\nimport HomeComponent from '../components/HomeComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*#__PURE__*/_jsxDEV(MovieList, {\n  movies: filteredMovies\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 1\n}, this);\nconst Home = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // State to hold the fetched movies\n  const [filteredMovies, setFilteredMovies] = useState([]); // State for filtered movies\n\n  // Fetch movies when the component mounts\n  useEffect(() => {\n    fetchMovies().then(data => {\n      console.log('Fetched movies:', data); // Log to verify data is being fetched\n      setMovies(data);\n      setFilteredMovies(data); // Initially, show all movies\n    }).catch(error => {\n      console.error('Error fetching movies:', error); // Log any errors that occur\n    });\n  }, []);\n\n  // Handler for search functionality\n  const handleSearch = searchTerm => {\n    const filtered = movies.filter(movie => movie.title.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredMovies(filtered);\n    console.log('Filtered movies after search:', filtered);\n  };\n\n  // Handler for filter by genre functionality\n  const handleFilterChange = genre => {\n    if (genre === 'all') {\n      setFilteredMovies(movies); // Show all movies if 'all' is selected\n    } else {\n      const filtered = movies.filter(movie => movie.genre === genre);\n      setFilteredMovies(filtered);\n    }\n    console.log('Filtered movies after genre change:', filteredMovies);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onFilterChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), filteredMovies.length > 0 ? /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: filteredMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading or no movies available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) // Show a message while loading or if no data is available\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"0HFdw+h2H6c+/0f/NAXqw1Kxo+A=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","fetchMovies","MovieList","SearchBar","Filter","HomeComponent","jsxDEV","_jsxDEV","movies","filteredMovies","fileName","_jsxFileName","lineNumber","columnNumber","Home","_s","setMovies","setFilteredMovies","then","data","console","log","catch","error","handleSearch","searchTerm","filtered","filter","movie","title","toLowerCase","includes","handleFilterChange","genre","children","onSearch","onFilterChange","length","_c","$RefreshReg$"],"sources":["C:/Users/Arcel/movieflix2.0/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchMovies } from '../services/api'; // Import your API fetching function\r\nimport MovieList from '../components/MovieList';\r\nimport SearchBar from '../components/SearchBar';\r\nimport Filter from '../components/Filter';\r\nimport HomeComponent from '../components/HomeComponent';\r\n<MovieList movies={filteredMovies} />\r\n\r\nconst Home = () => {\r\n  const [movies, setMovies] = useState([]); // State to hold the fetched movies\r\n  const [filteredMovies, setFilteredMovies] = useState([]); // State for filtered movies\r\n\r\n  // Fetch movies when the component mounts\r\n  useEffect(() => {\r\n    fetchMovies().then(data => {\r\n      console.log('Fetched movies:', data); // Log to verify data is being fetched\r\n      setMovies(data);\r\n      setFilteredMovies(data); // Initially, show all movies\r\n    }).catch(error => {\r\n      console.error('Error fetching movies:', error); // Log any errors that occur\r\n    });\r\n  }, []);\r\n\r\n  // Handler for search functionality\r\n  const handleSearch = (searchTerm) => {\r\n    const filtered = movies.filter(movie =>\r\n      movie.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setFilteredMovies(filtered);\r\n    console.log('Filtered movies after search:', filtered);\r\n  };\r\n\r\n  // Handler for filter by genre functionality\r\n  const handleFilterChange = (genre) => {\r\n    if (genre === 'all') {\r\n      setFilteredMovies(movies); // Show all movies if 'all' is selected\r\n    } else {\r\n      const filtered = movies.filter(movie => movie.genre === genre);\r\n      setFilteredMovies(filtered);\r\n    }\r\n    console.log('Filtered movies after genre change:', filteredMovies);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SearchBar onSearch={handleSearch} />\r\n      <Filter onFilterChange={handleFilterChange} />\r\n      {filteredMovies.length > 0 ? (\r\n        <MovieList movies={filteredMovies} />\r\n      ) : (\r\n        <p>Loading or no movies available</p> // Show a message while loading or if no data is available\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,iBAAiB,CAAC,CAAC;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,aAAa,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxD,aAAAA,OAAA,CAACL,SAAS;EAACM,MAAM,EAAEC;AAAe;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC;AAErC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACP,MAAM,EAAEQ,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACU,cAAc,EAAEQ,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1D;EACAC,SAAS,CAAC,MAAM;IACdC,WAAW,CAAC,CAAC,CAACiB,IAAI,CAACC,IAAI,IAAI;MACzBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAAC,CAAC,CAAC;MACtCH,SAAS,CAACG,IAAI,CAAC;MACfF,iBAAiB,CAACE,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CAACG,KAAK,CAACC,KAAK,IAAI;MAChBH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAIC,UAAU,IAAK;IACnC,MAAMC,QAAQ,GAAGlB,MAAM,CAACmB,MAAM,CAACC,KAAK,IAClCA,KAAK,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,UAAU,CAACK,WAAW,CAAC,CAAC,CAC7D,CAAC;IACDb,iBAAiB,CAACS,QAAQ,CAAC;IAC3BN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEK,QAAQ,CAAC;EACxD,CAAC;;EAED;EACA,MAAMM,kBAAkB,GAAIC,KAAK,IAAK;IACpC,IAAIA,KAAK,KAAK,KAAK,EAAE;MACnBhB,iBAAiB,CAACT,MAAM,CAAC,CAAC,CAAC;IAC7B,CAAC,MAAM;MACL,MAAMkB,QAAQ,GAAGlB,MAAM,CAACmB,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACK,KAAK,KAAKA,KAAK,CAAC;MAC9DhB,iBAAiB,CAACS,QAAQ,CAAC;IAC7B;IACAN,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEZ,cAAc,CAAC;EACpE,CAAC;EAED,oBACEF,OAAA;IAAA2B,QAAA,gBACE3B,OAAA,CAACJ,SAAS;MAACgC,QAAQ,EAAEX;IAAa;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCN,OAAA,CAACH,MAAM;MAACgC,cAAc,EAAEJ;IAAmB;MAAAtB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7CJ,cAAc,CAAC4B,MAAM,GAAG,CAAC,gBACxB9B,OAAA,CAACL,SAAS;MAACM,MAAM,EAAEC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAErCN,OAAA;MAAA2B,QAAA,EAAG;IAA8B;MAAAxB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;IACvC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACE,EAAA,CA9CID,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAgDV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}