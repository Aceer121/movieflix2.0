{"ast":null,"code":"import axios from 'axios';\nconsole.log('API Key:', API_KEY);\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY;\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconsole.log('API Key:', API_KEY); // Add this to verify\n\nif (!API_KEY) {\n  console.error('API Key is undefined. Please check your .env file.');\n}\nexport const fetchMovies = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/popular`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1\n      }\n    });\n\n    // Transform data to match component requirements\n    return response.data.results.map(movie => ({\n      id: movie.id,\n      title: movie.title,\n      genre: movie.genre_ids[0] || 'Unknown',\n      // Replace with actual genre mapping if needed\n      posterUrl: `https://image.tmdb.org/t/p/w500${movie.poster_path}` // Full URL for poster\n    }));\n  } catch (error) {\n    console.error('Error fetching movies:', error.message);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","console","log","API_KEY","process","env","REACT_APP_TMDB_API_KEY","BASE_URL","error","fetchMovies","response","get","params","api_key","language","page","data","results","map","movie","id","title","genre","genre_ids","posterUrl","poster_path","message"],"sources":["C:/Users/Arcel/movieflix2.0/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nconsole.log('API Key:', API_KEY);\r\n\r\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nconsole.log('API Key:', API_KEY); // Add this to verify\r\n\r\nif (!API_KEY) {\r\n  console.error('API Key is undefined. Please check your .env file.');\r\n}\r\n\r\nexport const fetchMovies = async () => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/movie/popular`, {\r\n      params: {\r\n        api_key:  API_KEY,\r\n        language: 'en-US',\r\n        page: 1,\r\n      },\r\n    });\r\n\r\n    // Transform data to match component requirements\r\n    return response.data.results.map(movie => ({\r\n      id: movie.id,\r\n      title: movie.title,\r\n      genre: movie.genre_ids[0] || 'Unknown', // Replace with actual genre mapping if needed\r\n      posterUrl: `https://image.tmdb.org/t/p/w500${movie.poster_path}`, // Full URL for poster\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching movies:', error.message);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,OAAO,CAAC;AAEhC,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAClD,MAAMC,QAAQ,GAAG,8BAA8B;AAE/CN,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,OAAO,CAAC,CAAC,CAAC;;AAElC,IAAI,CAACA,OAAO,EAAE;EACZF,OAAO,CAACO,KAAK,CAAC,oDAAoD,CAAC;AACrE;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,GAAGJ,QAAQ,gBAAgB,EAAE;MAC5DK,MAAM,EAAE;QACNC,OAAO,EAAGV,OAAO;QACjBW,QAAQ,EAAE,OAAO;QACjBC,IAAI,EAAE;MACR;IACF,CAAC,CAAC;;IAEF;IACA,OAAOL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,KAAK,KAAK;MACzCC,EAAE,EAAED,KAAK,CAACC,EAAE;MACZC,KAAK,EAAEF,KAAK,CAACE,KAAK;MAClBC,KAAK,EAAEH,KAAK,CAACI,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS;MAAE;MACxCC,SAAS,EAAE,kCAAkCL,KAAK,CAACM,WAAW,EAAE,CAAE;IACpE,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACkB,OAAO,CAAC;IACtD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}